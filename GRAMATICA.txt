Start -> {Declaração; | Comando} EOF
Bloco_ou_Comando -> Comando | Bloco
Bloco -> "{"{Comando}"}"
Tipo -> int (3) | float (4) | string (5) | char (6)
Declaração -> Tipo (7) Declaração_Init {, (7) Declaração_Init} | const id = [-] const_value (1)
Declaração_Init -> (2) id [<- [-] const_value]
Escrita -> "("Expressão {, Expressão} ")"
Comando -> id ["["Expressão"]"] <- Expressão ; | Repetição | Teste | ; | readln"("id")" ; | (write| writeln) Escrita ;
Repetição -> while Expressão Bloco_ou_Comando
Teste -> if Expressão Bloco_ou_Comando [else Bloco_ou_Comando]
Operadores_Relacional -> = | != | < | > | <= | >=
Expressão -> Expressão1 { Operadores_Relacional Expressão1}
Expressão1 -> [-] Expressão2 {(- | + | || )  Expressão2}
Expressão2 -> Expressão3 {(* | && | / | div | mod) Expressão3}
Expressão3 -> {!} Expressão4
Expressão4 -> ( (int | float) "("Expressão")"  | Expressão5)
Expressão5 -> "(" Expressão ")" | Expressão6
Expressão6 -> const_value | id ["[" Expressão "]"]


Esquema de Tradução:
1 { id.class = CONST, id.type = const_value.type }  // Validar se não foi setado o type previamente
2 { id.class = VAR, id.type = Declaração_Init.type } // Validar se não foi setado o type previamente
3 { Tipo.type = int.type }
4 { Tipo.type = float.type }
5 { Tipo.type = string.type }
6 { Tipo.type = char.type }
7 { Declaração_Init.type = Tipo.type }


